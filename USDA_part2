 #use change dir to move to downloads folder
 USDA = read.csv("USDA.csv")
 #Check if the first food in the dataset has a higher amount of sodium compared to the average, compare it using the greater-than sign
#to the mean of the Sodium vector,
 USDA$Sodium[1] > mean(USDA$Sodium, na.rm=TRUE)
[1] TRUE
#do the same thing for the 50th item
> USDA$Sodium[50] > mean(USDA$Sodium, na.rm=TRUE)
[1] FALSE
#now to check all 7000 put them in a vector
HighSodium = USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE)
#show structure of HighSodium
str(HighSodium)
#change type to numeric now it returns 0 and 1s vs TRUE and FALSE
HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE))
> str(HighSodium)
#now associate it with USDA dataframe
 USDA$HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE))
> str(USDA)
#create HighProtein, etc
USDA$HighProtein = as.numeric(USDA$Protein > mean(USDA$Protein, na.rm=TRUE))
> USDA$TotalFat = as.numeric(USDA$TotalFat > mean(USDA$TotalFat, na.rm=TRUE))
> USDA$Carbohydrate = as.numeric(USDA$Carbohydrate > mean(USDA$Carbohydrate, na.rm=TRUE))
> str(USDA)

 table(USDA$HighSodium)
#use change dir to move to downloads folder
> USDA$Sodium[1]
[1] 714
> USDA$Sodium[1] > mean(USDA$Sodium, na.rm=TRUE)
[1] TRUE
> USDA$Sodium[50] > mean(USDA$Sodium, na.rm=TRUE)
[1] FALSE
> HighSodium = USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE)
> str(HighSodium)
 logi [1:7058] TRUE TRUE FALSE TRUE TRUE TRUE ...
> HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE))
> str(HighSodium)
 num [1:7058] 1 1 0 1 1 1 1 1 1 1 ...
> USDA$HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE))
> str(USDA)
'data.frame':   7058 obs. of  17 variables:
 $ ID          : int  1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 ...
 $ Description : Factor w/ 7054 levels "ABALONE,MIXED SPECIES,RAW",..: 1303 1302 1298 2303 2304 2305 2306 2307 2308 2309 ...
 $ Calories    : int  717 717 876 353 371 334 300 376 403 387 ...
 $ Protein     : num  0.85 0.85 0.28 21.4 23.24 ...
 $ TotalFat    : num  81.1 81.1 99.5 28.7 29.7 ...
 $ Carbohydrate: num  0.06 0.06 0 2.34 2.79 0.45 0.46 3.06 1.28 4.78 ...
 $ Sodium      : int  714 827 2 1395 560 629 842 690 621 700 ...
 $ SaturatedFat: num  51.4 50.5 61.9 18.7 18.8 ...
 $ Cholesterol : int  215 219 256 75 94 100 72 93 105 103 ...
 $ Sugar       : num  0.06 0.06 0 0.5 0.51 0.45 0.46 NA 0.52 NA ...
 $ Calcium     : int  24 24 4 528 674 184 388 673 721 643 ...
 $ Iron        : num  0.02 0.16 0 0.31 0.43 0.5 0.33 0.64 0.68 0.21 ...
 $ Potassium   : int  24 26 5 256 136 152 187 93 98 95 ...
 $ VitaminC    : num  0 0 0 0 0 0 0 0 0 0 ...
 $ VitaminE    : num  2.32 2.32 2.8 0.25 0.26 0.24 0.21 NA 0.29 NA ...
 $ VitaminD    : num  1.5 1.5 1.8 0.5 0.5 0.5 0.4 NA 0.6 NA ...
 $ HighSodium  : num  1 1 0 1 1 1 1 1 1 1 ...
> USDA$HighProtein = as.numeric(USDA$Protein > mean(USDA$Protein, na.rm=TRUE))
> USDA$TotalFat = as.numeric(USDA$TotalFat > mean(USDA$TotalFat, na.rm=TRUE))
> USDA$Carbohydrate = as.numeric(USDA$Carbohydrate > mean(USDA$Carbohydrate, na.rm=TRUE))
> str(USDA)
'data.frame':   7058 obs. of  18 variables:
 $ ID          : int  1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 ...
 $ Description : Factor w/ 7054 levels "ABALONE,MIXED SPECIES,RAW",..: 1303 1302 1298 2303 2304 2305 2306 2307 2308 2309 ...
 $ Calories    : int  717 717 876 353 371 334 300 376 403 387 ...
 $ Protein     : num  0.85 0.85 0.28 21.4 23.24 ...
 $ TotalFat    : num  1 1 1 1 1 1 1 1 1 1 ...
 $ Carbohydrate: num  0 0 0 0 0 0 0 0 0 0 ...
 $ Sodium      : int  714 827 2 1395 560 629 842 690 621 700 ...
 $ SaturatedFat: num  51.4 50.5 61.9 18.7 18.8 ...
 $ Cholesterol : int  215 219 256 75 94 100 72 93 105 103 ...
 $ Sugar       : num  0.06 0.06 0 0.5 0.51 0.45 0.46 NA 0.52 NA ...
 $ Calcium     : int  24 24 4 528 674 184 388 673 721 643 ...
 $ Iron        : num  0.02 0.16 0 0.31 0.43 0.5 0.33 0.64 0.68 0.21 ...
 $ Potassium   : int  24 26 5 256 136 152 187 93 98 95 ...
 $ VitaminC    : num  0 0 0 0 0 0 0 0 0 0 ...
 $ VitaminE    : num  2.32 2.32 2.8 0.25 0.26 0.24 0.21 NA 0.29 NA ...
 $ VitaminD    : num  1.5 1.5 1.8 0.5 0.5 0.5 0.4 NA 0.6 NA ...
 $ HighSodium  : num  1 1 0 1 1 1 1 1 1 1 ...
 $ HighProtein : num  0 0 0 1 1 1 1 1 1 1 ...
> table(USDA$HighSodium)

   0    1 
4884 2090 
> table(USDA$HighSodium, USDA$HighFat)
Error in table(USDA$HighSodium, USDA$HighFat) : 
  all arguments must have the same length
> table(USDA$HighSodium, USDA$TotalFat)
   
       0    1
  0 3529 1355
  1 1378  712
> # to compute the average amount of iron sorted by high and low protein
> #use tapply - takes three arguments
> tapply(USDA$Iron, USDA$HighProtein, mean, na.rm = TRUE)
       0        1 
2.558945 3.197294 
> #now try the max level of vit C  in foods with high and low carbs
> tapply(USDA$VitaminC, USDA$HighCarbs, max, na.rm = TRUE)
Error in tapply(USDA$VitaminC, USDA$HighCarbs, max, na.rm = TRUE) : 
  arguments must have same length
> tapply(USDA$VitaminC, USDA$HighCarbs, max, na.rm = TRUE)
Error in tapply(USDA$VitaminC, USDA$HighCarbs, max, na.rm = TRUE) : 
  arguments must have same length
> tapply(USDA$Iron, USDA$HighCarbs, max, na.rm = TRUE)
Error in tapply(USDA$Iron, USDA$HighCarbs, max, na.rm = TRUE) : 
  arguments must have same length
> tapply(USDA$VitaminC, USDA$Iron, max, na.rm = TRUE)

> tapply(USDA$VitaminC, USDA$Iron, summary, na.rm = TRUE)
